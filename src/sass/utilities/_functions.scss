/// Color palette
/// @name palettes
/// @group srts
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

/// Strip units from values.
/// @name unit conversion
/// @group srts
///
/// @example strip-unit($num)
/// @return {number}
///
/// @link http://hugogiraudel.com/2013/08/12/sass-functions
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Convert pixel values to ems.
/// @name px to em
/// @group srts
///
/// @example strip-unit($num)
/// @return {number}
///
/// @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
@function em($target, $context: $base-font-size) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}
// rem()
//
// Convert pixel values to rems.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function rem($target, $context: $base-font-size) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0rem;
}

// px()
//
// Convert em values to pixels.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function px($target, $context: $base-font-size) {
  @if not unitless($target) {
    $pxval: strip-units($target);
  }
  @if not unitless($context) {
    $base: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target * $context + 0px;
}

// Map Functions
//
// Styleguide 11.2

// map-has-nested-keys($map)
//
// $map       - Parent map to get values from.
// @returns   - boolean
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  } @return true;
}

// map-deep-get($map)
//
// $map       - Parent map to get values from.
// @returns   - `$map`
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  } @return $map;
}

/// @name z-index
/// @group srts
///
/// @parameter {Map} $map - Map to update
/// @parameter {Arglist} $keys - Keys to access to value to update
/// @parameter {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
///
/// @link http://www.sitepoint.com/extra-map-functions-sass/
@function z($indexes...) {
  @if not map-has-nested-keys($zindex, $indexes...) {
    @warn 'No index found for `#{inspect($indexes...)}` in $zindex map. Property omitted.';
  } @return map-deep-get($zindex, $indexes...);
}

// bp()
//
// @requires  - `@map-has-nested-keys` / `@map-deep-get` / `$breakpoints`
// @returns   - `map-deep-get($breakpoints, $point...)`
// @source    - http://www.sitepoint.com/extra-map-functions-sass/

@function bp($point...) {
  @if not map-has-nested-keys($breakpoints, $point...) {
    @warn 'No breakpoint found for `#{inspect($point...)}` in $breakpoints map. Property omitted.';
  } @return map-deep-get($breakpoints, $point...);
}
